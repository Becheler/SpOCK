int ini_collision( OPTIONS_T *OPTIONS, int iProc ){ // !!!!!! the collision input file must be in meters
  //GOOD REFERENCE: http://www.prepacom.net/HEC2/math/cours/Changement%20de%20bases.pdf


  // Declarations
       /* double inva[36]; */
       /*     int s; */


/*   if (OPTIONS->coll_vcm == 0){ // if collison file is not a vcm */

/*   FILE *file_in_collision= NULL; */
/*   char filename_in_collision[256]; */
/*   strcpy(filename_in_collision, OPTIONS->filename_input_collision); */
/*   file_in_collision = fopen(filename_in_collision, "r"); */
/*   if (file_in_collision == NULL){ */
/*     printf("***! The collision input file could not be found (name of the file: %s). The program will stop. !***\n", OPTIONS->filename_input_collision); MPI_Finalize(); exit(0); */
/*   } */
/*   int find_state_eci = 0; */
/*   int find_covariance = 0; */
/*   int find_nb_ensembles = 0; */
/*   char *line = NULL; */
/*   size_t len = 0; */
/*   char text[256]; */

/*   // Find state ECI section */
/*   while ( ( find_state_eci == 0 ) && ( !feof( file_in_collision ) ) ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     sscanf( line, "%s", text); */
/*     if ( strcmp( text, "#STATE_ECI" ) == 0 ){ */
/*       find_state_eci = 1; */
/*     } */
/*   } */
/*   if ( feof( file_in_collision ) ){ */
/*     print_error(iProc, "No section #STATE_ECI was found in the collision input file"); */
/*   } */
  
/*   // Read ECI state for each sc */
/*   int isc; */
/*   for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++ ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     if (line[0] == '\0'){ */
/*       print_error(iProc, "It looks like you did not write a state for each of the spacecraft in the collision input file"); */
/*     }       */
/*     RemoveSpaces(line); */
/*     sscanf(line, "(%lf;%lf;%lf)(%lf;%lf;%lf)", &OPTIONS->x_eci[isc], &OPTIONS->y_eci[isc], &OPTIONS->z_eci[isc], &OPTIONS->vx_eci[isc], &OPTIONS->vy_eci[isc], &OPTIONS->vz_eci[isc]); */
/*     OPTIONS->x_eci[isc] = OPTIONS->x_eci[isc] / 1000.; // !!!!!!!!! the collission input file must be in meters */
/*     OPTIONS->y_eci[isc] = OPTIONS->y_eci[isc] / 1000.; */
/*     OPTIONS->z_eci[isc] = OPTIONS->z_eci[isc] / 1000.; */
/*     OPTIONS->vx_eci[isc] = OPTIONS->vx_eci[isc] / 1000.; */
/*     OPTIONS->vy_eci[isc] = OPTIONS->vy_eci[isc] / 1000.; */
/*     OPTIONS->vz_eci[isc] = OPTIONS->vz_eci[isc] / 1000.; */
/*   } */

/*   // Find covariace section */
/*   rewind(file_in_collision); */
/*   while ( ( find_covariance == 0 ) && ( !feof( file_in_collision ) ) ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     sscanf( line, "%s", text); */
/*     if ( strcmp( text, "#COVARIANCE" ) == 0 ){ */
/*       find_covariance = 1; */
/*     } */
/*   } */
/*   if ( feof( file_in_collision ) ){ */
/*     print_error(iProc, "No section #COVARIANCE was found in the collision input file"); */
/*   } */
  
/*   // Read covariance matrix for each sc */

/*   int i; */
/*   OPTIONS->covariance_matrix = malloc( OPTIONS->nb_satellites_not_including_gps * sizeof( double **) ); */
/*   for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++ ){ */
/*     OPTIONS->covariance_matrix[isc] = malloc( 6 * sizeof( double *) ); */
/*     for ( i = 0; i < 6; i++ ){ */
/*       OPTIONS->covariance_matrix[isc][i] = malloc( 6 * sizeof( double ) ); */
/*       if ( OPTIONS->covariance_matrix[isc][i] == NULL ){ */
/* 	print_error(iProc, "Not enough memory for the covariance matrix"); */
/*       } */
/*     } */
/*     if ( OPTIONS->covariance_matrix[isc] == NULL ){ */
/*       print_error(iProc, "Not enough memory for the covariance matrix"); */
/*     } */
/*   } */
/*   if ( OPTIONS->covariance_matrix == NULL ){ */
/*     print_error(iProc, "Not enough memory for the covariance matrix"); */
/*   } */

/*   for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++ ){ */
/*     for ( i = 0; i < 6; i++ ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     if (line[0] == '\0'){ */
/*       print_error(iProc, "It looks like you did not write a covariance matrix for each of the spacecraft in the collision input file or that you incorrectly wrote it"); */
/*     }       */
/*     RemoveSpaces(line); */
/*     if ( i == 0 ){ */
/*       sscanf(line, "((%lf;%lf;%lf;%lf;%lf;%lf);", &OPTIONS->covariance_matrix[isc][i][0], &OPTIONS->covariance_matrix[isc][i][1], &OPTIONS->covariance_matrix[isc][i][2], &OPTIONS->covariance_matrix[isc][i][3], &OPTIONS->covariance_matrix[isc][i][4], &OPTIONS->covariance_matrix[isc][i][5]);  */
/*     } */
/*     else if ( i == 5 ){ */
/*       sscanf(line, "(%lf;%lf;%lf;%lf;%lf;%lf))", &OPTIONS->covariance_matrix[isc][i][0], &OPTIONS->covariance_matrix[isc][i][1], &OPTIONS->covariance_matrix[isc][i][2], &OPTIONS->covariance_matrix[isc][i][3], &OPTIONS->covariance_matrix[isc][i][4], &OPTIONS->covariance_matrix[isc][i][5]);  */
/*     } */
/*     else{ */
/*       sscanf(line, "(%lf;%lf;%lf;%lf;%lf;%lf);", &OPTIONS->covariance_matrix[isc][i][0], &OPTIONS->covariance_matrix[isc][i][1], &OPTIONS->covariance_matrix[isc][i][2], &OPTIONS->covariance_matrix[isc][i][3], &OPTIONS->covariance_matrix[isc][i][4], &OPTIONS->covariance_matrix[isc][i][5]);  */
/*     } */
/*     } */
/*   } */


/*   // Find state #NB_ENSEMBLES_COLLISION section */
/*   rewind(file_in_collision); */
/*   while ( ( find_nb_ensembles == 0 ) && ( !feof( file_in_collision ) ) ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     sscanf( line, "%s", text); */
/*     if ( strcmp( text, "#NB_ENSEMBLES_COLLISION" ) == 0 ){ */
/*       find_nb_ensembles = 1; */
/*     } */
/*   } */
/*   if ( feof( file_in_collision ) ){ */
/*     print_error(iProc, "No section #NB_ENSEMBLES_COLLISION was found in the collision input file"); */
/*   } */
/*   getline( &line, &len, file_in_collision ); */
/*   OPTIONS->nb_ensembles = 0; */
/*   sscanf(line,"%d", &OPTIONS->nb_ensembles); */

/*   // Find state #MIN_DISTANCE_CLOSE_APPROACH section */
/*   int find_min_dist_close_approach = 0; */
/*   while ( ( find_min_dist_close_approach == 0 ) && ( !feof( file_in_collision ) ) ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     sscanf( line, "%s", text); */
/*     if ( strcmp( text, "#MIN_DISTANCE_CLOSE_APPROACH" ) == 0 ){ */
/*       find_min_dist_close_approach = 1; */
/*     } */
/*   } */
/*   if ( feof( file_in_collision ) ){ */
/*     print_error(iProc, "No section #MIN_DISTANCE_CLOSE_APPROACH was found in the collision input file"); */
/*   } */
/*   getline( &line, &len, file_in_collision ); */
/*   OPTIONS->min_dist_close_approach = 0; */
/*   sscanf(line,"%lf", &OPTIONS->min_dist_close_approach); */
/*   OPTIONS->min_dist_close_approach = OPTIONS->min_dist_close_approach / 1000.;  // !!!!!!!!! the collission input file must be in meters */



/*   // Find state #MIN_DISTANCE_COLLISION section */
/*   int find_min_dist_collision = 0; */
/*   while ( ( find_min_dist_collision == 0 ) && ( !feof( file_in_collision ) ) ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     sscanf( line, "%s", text); */
/*     if ( strcmp( text, "#MIN_DISTANCE_COLLISION" ) == 0 ){ */
/*       find_min_dist_collision = 1; */
/*     } */
/*   } */
/*   if ( feof( file_in_collision ) ){ */
/*     print_error(iProc, "No section #MIN_DISTANCE_COLLISION was found in the collision input file"); */
/*   } */
/*   getline( &line, &len, file_in_collision ); */
/*   OPTIONS->min_dist_collision = 0; */
/*   sscanf(line,"%lf", &OPTIONS->min_dist_collision); */
/*   OPTIONS->min_dist_collision = OPTIONS->min_dist_collision / 1000.;  // !!!!!!!!! the collission input file must be in meters */
/*   } // end of if not a vcm  */

/*     else{ // if vcm, the information (r/v etc) has been read in the function read_vcm. Need to fill variables and convert equinoctial cov to eci cov */



/*   OPTIONS->covariance_matrix = malloc( OPTIONS->nb_satellites_not_including_gps * sizeof( double **) ); */
/*   for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++ ){ */
/*     OPTIONS->covariance_matrix[isc] = malloc( 6 * sizeof( double *) ); */
/*     for ( i = 0; i < 6; i++ ){ */
/*       OPTIONS->covariance_matrix[isc][i] = malloc( 6 * sizeof( double ) ); */
/*       if ( OPTIONS->covariance_matrix[isc][i] == NULL ){ */
/* 	print_error(iProc, "Not enough memory for the covariance matrix"); */
/*       } */
/*     } */
/*     if ( OPTIONS->covariance_matrix[isc] == NULL ){ */
/*       print_error(iProc, "Not enough memory for the covariance matrix"); */
/*     } */
/*   } */
/*   if ( OPTIONS->covariance_matrix == NULL ){ */
/*     print_error(iProc, "Not enough memory for the covariance matrix"); */
/*   } */

/*   for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++ ){ */
/* OPTIONS->covariance_matrix[isc][i][0] */

/*  double T_equin_to_cart[6][6]; */
/*  compute_T_deriv_equin_to_cart( T_equin_to_cart, af, ag, lequin, nequin, chi, psi, mu, fr); */


/*   } */


/*   // Find state #NB_ENSEMBLES_COLLISION section */
/*   rewind(file_in_collision); */
/*   while ( ( find_nb_ensembles == 0 ) && ( !feof( file_in_collision ) ) ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     sscanf( line, "%s", text); */
/*     if ( strcmp( text, "#NB_ENSEMBLES_COLLISION" ) == 0 ){ */
/*       find_nb_ensembles = 1; */
/*     } */
/*   } */
/*   if ( feof( file_in_collision ) ){ */
/*     print_error(iProc, "No section #NB_ENSEMBLES_COLLISION was found in the collision input file"); */
/*   } */
/*   getline( &line, &len, file_in_collision ); */
/*   OPTIONS->nb_ensembles = 0; */
/*   sscanf(line,"%d", &OPTIONS->nb_ensembles); */

/*   // Find state #MIN_DISTANCE_CLOSE_APPROACH section */
/*   int find_min_dist_close_approach = 0; */
/*   while ( ( find_min_dist_close_approach == 0 ) && ( !feof( file_in_collision ) ) ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     sscanf( line, "%s", text); */
/*     if ( strcmp( text, "#MIN_DISTANCE_CLOSE_APPROACH" ) == 0 ){ */
/*       find_min_dist_close_approach = 1; */
/*     } */
/*   } */
/*   if ( feof( file_in_collision ) ){ */
/*     print_error(iProc, "No section #MIN_DISTANCE_CLOSE_APPROACH was found in the collision input file"); */
/*   } */
/*   getline( &line, &len, file_in_collision ); */
/*   OPTIONS->min_dist_close_approach = 0; */
/*   sscanf(line,"%lf", &OPTIONS->min_dist_close_approach); */
/*   OPTIONS->min_dist_close_approach = OPTIONS->min_dist_close_approach / 1000.;  // !!!!!!!!! the collission input file must be in meters */



/*   // Find state #MIN_DISTANCE_COLLISION section */
/*   int find_min_dist_collision = 0; */
/*   while ( ( find_min_dist_collision == 0 ) && ( !feof( file_in_collision ) ) ){ */
/*     getline( &line, &len, file_in_collision ); */
/*     sscanf( line, "%s", text); */
/*     if ( strcmp( text, "#MIN_DISTANCE_COLLISION" ) == 0 ){ */
/*       find_min_dist_collision = 1; */
/*     } */
/*   } */
/*   if ( feof( file_in_collision ) ){ */
/*     print_error(iProc, "No section #MIN_DISTANCE_COLLISION was found in the collision input file"); */
/*   } */
/*   getline( &line, &len, file_in_collision ); */
/*   OPTIONS->min_dist_collision = 0; */
/*   sscanf(line,"%lf", &OPTIONS->min_dist_collision); */
/*   OPTIONS->min_dist_collision = OPTIONS->min_dist_collision / 1000.;  / */

/*     } */

/*   ////////////// DIAGNOALZATION OF COVARIANCES MATRICES (source: https://www.gnu.org/software/gsl/manual/html_node/Eigenvalue-and-Eigenvector-Examples.html) */
/*   int j; */
/*   double data[36]; */
/*   // Allocate memory for eigenvalues, eigenvectors, and rotation matrix */
/*   OPTIONS->eigenvalue_covariance_matrix = malloc( OPTIONS->nb_satellites_not_including_gps * sizeof(double *) ); */
/*   for (isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++){ */
/*     OPTIONS->eigenvalue_covariance_matrix[isc] = malloc( 6 * sizeof( double ) ); */
/*     if (  OPTIONS->eigenvalue_covariance_matrix[isc] == NULL ){ */
/*       print_error(iProc, "Not enough memory for eigenvalues of the covariance matrix for collision assessment"); */
/*     } */
/*   } */
/*   if ( OPTIONS->eigenvalue_covariance_matrix == NULL ){ */
/*     print_error(iProc, "Not enough memory for eigenvalues of the covariance matrix for collision assessment"); */
/*   } */

/*   double ***eigenvector_covariance_matrix; */
/*   eigenvector_covariance_matrix = malloc( OPTIONS->nb_satellites_not_including_gps * sizeof(double **) ); */
/*   for (isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++){ */
/*     eigenvector_covariance_matrix[isc] = malloc( 6 * sizeof( double *) ); */
/*     for ( i = 0; i < 6; i++ ){ */
/*       eigenvector_covariance_matrix[isc][i] = malloc( 6 * sizeof( double) ); */
/*     if (  eigenvector_covariance_matrix[isc][i] == NULL ){ */
/*       print_error(iProc, "Not enough memory for eigenvectors of the covariance matrix for collision assessment"); */
/*     } */

/*     } */
/*     if (  eigenvector_covariance_matrix[isc] == NULL ){ */
/*       print_error(iProc, "Not enough memory for eigenvectors of the covariance matrix for collision assessment"); */
/*     } */
/*   } */
/*   if ( eigenvector_covariance_matrix == NULL ){ */
/*     print_error(iProc, "Not enough memory for eigenvectors of the covariance matrix for collision assessment"); */
/*   } */


/*   OPTIONS->rotation_matrix_for_diagonalization = malloc( OPTIONS->nb_satellites_not_including_gps * sizeof( double **) ); */
/*   for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++ ){ */
/*     OPTIONS->rotation_matrix_for_diagonalization[isc] = malloc( 6 * sizeof( double *) ); */
/*     for ( i = 0; i < 6; i++ ){ */
/*       OPTIONS->rotation_matrix_for_diagonalization[isc][i] = malloc( 6 * sizeof( double ) ); */
/*       if ( OPTIONS->rotation_matrix_for_diagonalization[isc][i] == NULL ){ */
/* 	print_error(iProc, "Not enough memory for the covariance matrix"); */
/*       } */
/*     } */
/*     if ( OPTIONS->rotation_matrix_for_diagonalization[isc] == NULL ){ */
/*       print_error(iProc, "Not enough memory for the covariance matrix"); */
/*     } */
/*   } */
/*   if ( OPTIONS->rotation_matrix_for_diagonalization  == NULL ){ */
/*     print_error(iProc, "Not enough memory for the covariance matrix"); */
/*   } */



/*   OPTIONS->inverse_rotation_matrix_for_diagonalization = malloc( OPTIONS->nb_satellites_not_including_gps * sizeof( double **) ); */
/*   for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++ ){ */
/*     OPTIONS->inverse_rotation_matrix_for_diagonalization[isc] = malloc( 6 * sizeof( double *) ); */
/*     for ( i = 0; i < 6; i++ ){ */
/*       OPTIONS->inverse_rotation_matrix_for_diagonalization[isc][i] = malloc( 6 * sizeof( double ) ); */
/*       if ( OPTIONS->inverse_rotation_matrix_for_diagonalization[isc][i] == NULL ){ */
/* 	print_error(iProc, "Not enough memory for the covariance matrix"); */
/*       } */
/*     } */
/*     if ( OPTIONS->inverse_rotation_matrix_for_diagonalization[isc] == NULL ){ */
/*       print_error(iProc, "Not enough memory for the covariance matrix"); */
/*     } */
/*   } */
/*   if ( OPTIONS->inverse_rotation_matrix_for_diagonalization   == NULL ){ */
/*     print_error(iProc, "Not enough memory for the covariance matrix"); */
/*   } */



/*   /\* OPTIONS->inverse_rotation_matrix_for_diagonalization_copy = malloc( OPTIONS->nb_satellites_not_including_gps * sizeof( double **) ); *\/ */
/*   /\* for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++ ){ *\/ */
/*   /\*   OPTIONS->inverse_rotation_matrix_for_diagonalization_copy[isc] = malloc( 6 * sizeof( double *) ); *\/ */
/*   /\*   for ( i = 0; i < 6; i++ ){ *\/ */
/*   /\*     OPTIONS->inverse_rotation_matrix_for_diagonalization_copy[isc][i] = malloc( 6 * sizeof( double ) ); *\/ */
/*   /\*     if ( OPTIONS->inverse_rotation_matrix_for_diagonalization_copy[isc][i] == NULL ){ *\/ */
/*   /\* 	print_error(iProc, "Not enough memory for the covariance matrix"); *\/ */
/*   /\*     } *\/ */
/*   /\*   } *\/ */
/*   /\*   if ( OPTIONS->inverse_rotation_matrix_for_diagonalization_copy[isc] == NULL ){ *\/ */
/*   /\*     print_error(iProc, "Not enough memory for the covariance matrix"); *\/ */
/*   /\*   } *\/ */
/*   /\* } *\/ */
/*   /\* if ( OPTIONS->inverse_rotation_matrix_for_diagonalization_copy   == NULL ){ *\/ */
/*   /\*   print_error(iProc, "Not enough memory for the covariance matrix"); *\/ */
/*   /\* } *\/ */


/*   // GOOD REFERENCE: http://www.prepacom.net/HEC2/math/cours/Changement%20de%20bases.pdf */
/*   /\* if (iProc == 0){ *\/ */
/*   /\* m_print6(OPTIONS->covariance_matrix[0], "M"); *\/ */
/*   /\* } *\/ */
/*   for ( isc = 0; isc < OPTIONS->nb_satellites_not_including_gps; isc++){ */
/*     // Convert covariance matrix in correct format for GSL library */
/*     for (i = 0; i < 6; i++){ */
/*       for (j = 0; j < 6; j++){ */
/* 	data[i*6 + j] = OPTIONS->covariance_matrix[isc][i][j]; */
/*       } */
/*     } */
  

/*     // Allocate variables for GSL libaries */
/*   gsl_matrix_view m = gsl_matrix_view_array (data, 6, 6); */
/*   gsl_vector_complex *eval = gsl_vector_complex_alloc (6); */
/*   gsl_matrix_complex *evec = gsl_matrix_complex_alloc (6, 6); */
/*   gsl_eigen_nonsymmv_workspace * w = gsl_eigen_nonsymmv_alloc (6);   */

/* // Diagonalization */
/*   gsl_eigen_nonsymmv (&m.matrix, eval, evec,  w);  */
/*   // Write eigenvalues in OPTIONS->eigenvalue_covariance_matrix[isc] and eigenvectors in eigenvector_covariance_matrix[isc] for each sc */
/*   //  print_test(); */
/*     for (i = 0; i < 6; i++){ */
/*       // Eigenvalues */
/*         gsl_complex eval_i = gsl_vector_complex_get (eval, i); */
/* 	OPTIONS->eigenvalue_covariance_matrix[isc][i] = GSL_REAL(eval_i); */
/* 	/\* if (iProc==0){ *\/ */
/* 	/\* /\\* if (isc == 1){ *\\/ *\/ */
/* 	/\*   //	  printf("lambda[%d] = %g\n",i, OPTIONS->eigenvalue_covariance_matrix[isc][i]); *\/ */
/* 	/\*   //	  printf("lambda[%d] = %g\n",i, eval[i]); *\/ */
/* 	/\* /\\* } *\\/ *\/ */
/* 	/\*   } *\/ */
/* 	if  ( OPTIONS->eigenvalue_covariance_matrix[isc][i] < 0 ){ */
/* 	  print_error(iProc, "The eigenvalue of the covariance matrix is negative"); */
/* 	} */
/* 	//	printf("%e %d %d\n", OPTIONS->eigenvalue_covariance_matrix[isc][i], isc, i); */
/* 	// Eigenvectors */
/* 	gsl_vector_complex_view evec_i = gsl_matrix_complex_column (evec, i); */

/* 	for ( j = 0; j < 6; j++ ){ */
/* 	  gsl_complex z =  gsl_vector_complex_get(&evec_i.vector, j); */
/* 	  eigenvector_covariance_matrix[isc][i][j] = GSL_REAL(z); */
/* 	  OPTIONS->rotation_matrix_for_diagonalization[isc][j][i] = eigenvector_covariance_matrix[isc][i][j]; */
/* 	  //	  OPTIONS->inverse_rotation_matrix_for_diagonalization_copy[isc][i][j] = eigenvector_covariance_matrix[isc][i][j]; */
/* 	  /\* if (iProc==0){ *\/ */
/* 	  /\*   if (isc == 1){ *\/ */
	      
/* 	  /\*     	  	    ptd(eigenvector_covariance_matrix[isc][i][j] , "e"); *\/ */
/* 	  /\*   } *\/ */
/* 	  /\* } *\/ */
/* 	} */
/* 	//		printf("\n"); */
/*     } */
/*     //    m_print6(OPTIONS->rotation_matrix_for_diagonalization[isc], "Rotation matrix" ); */
  

/*     /\* for (i = 0; i < 6; i++){ *\/ */
/*     /\*   for (j = 0; j < 6; j++){ *\/ */
/*     /\* 	data[i*6 + j] = OPTIONS->rotation_matrix_for_diagonalization[isc][i][j]; *\/ */
/*     /\*   } *\/ */
/*     /\* } *\/

    // Allocate variables for GSL libaries
      /\* gsl_matrix_view m_to_inv = gsl_matrix_view_array (data, 6, 6); *\/
      /\* gsl_matrix_view inv = gsl_matrix_view_array(inva,6,6); *\/
      /\* gsl_permutation * p = gsl_permutation_alloc (6); *\/

      /\* gsl_linalg_LU_decomp (&m_to_inv.matrix, p, &s); *\/
      /\* gsl_linalg_LU_invert (&m_to_inv.matrix, p, &inv.matrix); *\/

      /\* for (i = 0; i < 6; ++i){ *\/
      /\* 	for (j = 0; j < 6; ++j){ *\/
      /\* 	  OPTIONS->inverse_rotation_matrix_for_diagonalization[isc][i][j] = gsl_matrix_get(&inv.matrix,i,j); *\/
      /\* 	} *\/
      /\* } *\/
      /\* //      m_print6(OPTIONS->inverse_rotation_matrix_for_diagonalization[isc], "OPTIONS->inverse_rotation_matrix_for_diagonalization[isc]"); *\/
      /\* gsl_permutation_free (p); *\/
    
    /\* // exitall(); *\/
    /\* /\\*   if ( (iProc == 0) ){ *\\/ *\/
    /\* /\\*        m_print6(OPTIONS->inverse_rotation_matrix_for_diagonalization[isc], "inverse rot mat"); *\\/ *\/
    /\* /\\* } *\\/ *\/

  gsl_vector_complex_free(eval);
  gsl_matrix_complex_free(evec);
  gsl_eigen_nonsymmv_free(w);
}
  
  //         exitall();
  /\* // Check diagonalization *\/
  /\* double **mat_temp = NULL, **mat_temp2 = NULL; *\/
  /\* mat_temp = malloc( 6 * sizeof( double * ) ); *\/
  /\* if (mat_temp == NULL){ *\/
  /\*   print_error(iProc, "Not enough memory for check matrix mat_temp"); *\/
  /\* } *\/
  /\* for (i = 0; i < 6; i++){ *\/
  /\*   mat_temp[i] = malloc( 6 * sizeof( double ) ); *\/
  /\* if (mat_temp[i] == NULL){ *\/
  /\*   print_error(iProc, "Not enough memory for check matrix mat_temp"); *\/
  /\* } *\/

  /\* } *\/
  /\* mat_temp2 = malloc( 6 * sizeof( double * ) ); *\/
  /\* if (mat_temp2 == NULL){ *\/
  /\*   print_error(iProc, "Not enough memory for check matrix mat_temp2"); *\/
  /\* } *\/

  /\* for (i = 0; i < 6; i++){ *\/
  /\*   mat_temp2[i] = malloc( 6 * sizeof( double ) ); *\/
  /\* if (mat_temp2[i] == NULL){ *\/
  /\*   print_error(iProc, "Not enough memory for check matrix mat_temp2"); *\/
  /\* } *\/

  /\* } *\/

  /\* if ( (iProc == 0) ){ *\/
  /\*   isc = 0; *\/

  /\* /\\* m_x_m6( mat_temp, OPTIONS->covariance_matrix[isc], OPTIONS->rotation_matrix_for_diagonalization[isc] ); *\\/ *\/
  /\* /\\* m_x_m6( mat_temp2, OPTIONS->inverse_rotation_matrix_for_diagonalization[isc], mat_temp ); *\\/ *\/
  /\* m_x_m6(mat_temp2, OPTIONS->inverse_rotation_matrix_for_diagonalization[isc], OPTIONS->rotation_matrix_for_diagonalization[isc]); *\/
  /\* m_print6(mat_temp2, "inverse sc 0"); *\/
  /\* /\\* m_x_m6(mat_temp2, OPTIONS->inverse_rotation_matrix_for_diagonalization_copy[isc], OPTIONS->rotation_matrix_for_diagonalization[isc]); *\\/ *\/
  /\* /\\* m_print6(mat_temp2, "XXXXXXXXXXX"); *\\/ *\/

  /\*   isc = 1; *\/

  /\* /\\* m_x_m6( mat_temp, OPTIONS->covariance_matrix[isc], OPTIONS->rotation_matrix_for_diagonalization[isc] ); *\\/ *\/
  /\* /\\* m_x_m6( mat_temp2, OPTIONS->inverse_rotation_matrix_for_diagonalization[isc], mat_temp ); *\\/ *\/
  /\* m_x_m6(mat_temp2, OPTIONS->inverse_rotation_matrix_for_diagonalization[isc], OPTIONS->rotation_matrix_for_diagonalization[isc]); *\/
  /\* m_print6(mat_temp2, "inverse sc 1"); *\/

  /\* /\\* for (i = 0; i < 6; i++){ *\\/ *\/
  /\* /\\*   printf("%15.10e\n", OPTIONS->eigenvalue_covariance_matrix[isc][i]); *\\/ *\/
  /\* /\\* } *\\/ *\/
  /\* } *\/
  /\* // END of Check diagonalization *\/


  //  exitall();



  fclose(file_in_collision);
  return 0;
}
